# Generated by Django 4.0 on 2021-12-13 01:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=140, null=True, verbose_name='Tittel')),
                ('place', models.CharField(blank=True, max_length=140, null=True, verbose_name='Sted')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Dato')),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Slutt')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Kommentarer')),
                ('semester_char', models.CharField(blank=True, max_length=5, null=True)),
                ('external', models.BooleanField(default=False, verbose_name='Eksternkurs')),
                ('bulk', models.PositiveIntegerField(blank=True, null=True, verbose_name='Bolk')),
                ('day', models.PositiveIntegerField(blank=True, null=True, verbose_name='Dag')),
                ('last_edited', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Sist redigert')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('semester_choice', models.IntegerField(blank=True, choices=[(0, '------'), (1, 'V2000'), (2, 'V2001'), (3, 'V2002'), (4, 'V2003'), (5, 'V2004'), (6, 'V2005'), (7, 'V2006'), (8, 'V2007'), (9, 'V2008'), (10, 'V2009'), (11, 'V2010'), (12, 'V2011'), (13, 'V2012'), (14, 'V2013'), (15, 'V2014'), (16, 'V2015'), (17, 'V2016'), (18, 'V2017'), (19, 'V2018'), (20, 'V2019'), (21, 'V2020'), (22, 'V2021'), (23, 'V2022'), (24, 'V2023'), (25, 'V2024'), (26, 'V2025'), (27, 'V2026'), (28, 'V2027'), (29, 'V2028'), (30, 'V2029'), (31, 'V2030'), (32, 'V2031'), (33, 'V2032'), (34, 'V2033'), (35, 'V2034'), (36, 'V2035'), (37, 'V2036'), (38, 'V2037'), (39, 'V2038'), (40, 'V2039'), (41, 'V2040'), (42, 'V2041'), (43, 'V2042'), (44, 'V2043'), (45, 'V2044'), (46, 'V2045'), (47, 'V2046'), (48, 'V2047'), (49, 'V2048'), (50, 'V2049'), (51, 'V2050'), (52, 'V2051'), (53, 'V2052'), (54, 'V2053'), (55, 'V2054'), (56, 'V2055'), (57, 'V2056'), (58, 'V2057'), (59, 'V2058'), (60, 'V2059'), (61, 'V2060'), (62, 'V2061'), (63, 'V2062'), (64, 'V2063'), (65, 'V2064'), (66, 'V2065'), (67, 'V2066'), (68, 'V2067'), (69, 'V2068'), (70, 'V2069'), (71, 'V2070'), (72, 'V2071'), (73, 'V2072'), (74, 'V2073'), (75, 'V2074'), (76, 'V2075'), (77, 'V2076'), (78, 'V2077'), (79, 'V2078'), (80, 'V2079'), (81, 'V2080'), (82, 'V2081'), (83, 'V2082'), (84, 'V2083'), (85, 'V2084'), (86, 'V2085'), (87, 'V2086'), (88, 'V2087'), (89, 'V2088'), (90, 'V2089'), (91, 'V2090'), (92, 'V2091'), (93, 'V2092'), (94, 'V2093'), (95, 'V2094'), (96, 'V2095'), (97, 'V2096'), (98, 'V2097'), (99, 'V2098'), (100, 'V2099'), (101, 'H2000'), (102, 'H2001'), (103, 'H2002'), (104, 'H2003'), (105, 'H2004'), (106, 'H2005'), (107, 'H2006'), (108, 'H2007'), (109, 'H2008'), (110, 'H2009'), (111, 'H2010'), (112, 'H2011'), (113, 'H2012'), (114, 'H2013'), (115, 'H2014'), (116, 'H2015'), (117, 'H2016'), (118, 'H2017'), (119, 'H2018'), (120, 'H2019'), (121, 'H2020'), (122, 'H2021'), (123, 'H2022'), (124, 'H2023'), (125, 'H2024'), (126, 'H2025'), (127, 'H2026'), (128, 'H2027'), (129, 'H2028'), (130, 'H2029'), (131, 'H2030'), (132, 'H2031'), (133, 'H2032'), (134, 'H2033'), (135, 'H2034'), (136, 'H2035'), (137, 'H2036'), (138, 'H2037'), (139, 'H2038'), (140, 'H2039'), (141, 'H2040'), (142, 'H2041'), (143, 'H2042'), (144, 'H2043'), (145, 'H2044'), (146, 'H2045'), (147, 'H2046'), (148, 'H2047'), (149, 'H2048'), (150, 'H2049'), (151, 'H2050'), (152, 'H2051'), (153, 'H2052'), (154, 'H2053'), (155, 'H2054'), (156, 'H2055'), (157, 'H2056'), (158, 'H2057'), (159, 'H2058'), (160, 'H2059'), (161, 'H2060'), (162, 'H2061'), (163, 'H2062'), (164, 'H2063'), (165, 'H2064'), (166, 'H2065'), (167, 'H2066'), (168, 'H2067'), (169, 'H2068'), (170, 'H2069'), (171, 'H2070'), (172, 'H2071'), (173, 'H2072'), (174, 'H2073'), (175, 'H2074'), (176, 'H2075'), (177, 'H2076'), (178, 'H2077'), (179, 'H2078'), (180, 'H2079'), (181, 'H2080'), (182, 'H2081'), (183, 'H2082'), (184, 'H2083'), (185, 'H2084'), (186, 'H2085'), (187, 'H2086'), (188, 'H2087'), (189, 'H2088'), (190, 'H2089'), (191, 'H2090'), (192, 'H2091'), (193, 'H2092'), (194, 'H2093'), (195, 'H2094'), (196, 'H2095'), (197, 'H2096'), (198, 'H2097'), (199, 'H2098'), (200, 'H2099')], null=True)),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_courses', to='accounts.user', verbose_name='Opprettet av')),
                ('follow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='follow_courses', to='accounts.user', verbose_name='Instruktør (follow)')),
                ('instructors', models.ManyToManyField(blank=True, to='accounts.Instructor')),
                ('last_editor', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_edited_courses', to='accounts.user', verbose_name='Sist redigert av')),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_courses', to='accounts.user', verbose_name='Instruktør (lead)')),
            ],
            options={
                'verbose_name': 'Kurs',
                'verbose_name_plural': 'Kurs',
                'ordering': ['date', 'bulk', 'day', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=140, null=True, verbose_name='Tittel')),
                ('place', models.CharField(blank=True, max_length=140, null=True, verbose_name='Sted')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='Start')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Slutt')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Beskrivelse')),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('earlybirds', models.IntegerField(blank=True, null=True)),
                ('earlybird_limit', models.IntegerField(blank=True, default=100, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('earlybird_price', models.IntegerField(blank=True, null=True)),
                ('last_edited', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Sist redigert')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_eventset', to='accounts.user', verbose_name='Opprettet av')),
                ('last_editor', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='edited_eventset', to='accounts.user', verbose_name='Sist redigert av')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-start', 'title'],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('file', models.FileField(upload_to='mediaroot/')),
            ],
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, null=True, verbose_name='Tittel')),
                ('private', models.BooleanField(blank=True, default=True, verbose_name='Privat mappe')),
                ('last_edited', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Sist redigert')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_folderset', to='accounts.user', verbose_name='Opprettet av')),
                ('last_editor', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor_folderset', to='accounts.user', verbose_name='Sist redigert av')),
                ('perm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='folderset', to='auth.permission', verbose_name='Rettighet')),
                ('root_folder', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='ntnuisf.folder', verbose_name='Hovedmappe')),
            ],
            options={
                'verbose_name': 'Mappe',
                'verbose_name_plural': 'Mapper',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('text', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, null=True, unique=True, verbose_name='Tittel')),
                ('context', models.CharField(blank=True, help_text='Mellomrom-separerte nøkkelord for å relatere tag til kategori (Blank for ikke spesifikk type). Bruk: song, course eller video.', max_length=100, null=True)),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.user', verbose_name='Opprettet av')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, null=True, verbose_name='Tittel')),
                ('youtube_URL', models.URLField(null=True)),
                ('embedded', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Beskrivelse')),
                ('focus', models.TextField(blank=True, null=True, verbose_name='Fokuspunkt')),
                ('difficulty', models.IntegerField(choices=[(1, 'Lett'), (2, 'Middels'), (3, 'Vanskelig')], default=1, verbose_name='Vanskelighetsgrad')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.user', verbose_name='Opprettet av')),
                ('tags', models.ManyToManyField(to='ntnuisf.Tag')),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videoer',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, null=True, verbose_name='Tittel')),
                ('artist', models.CharField(max_length=150, null=True)),
                ('bpm', models.SmallIntegerField(blank=True, help_text='Helst antall partall per minutt', null=True)),
                ('spotify_URL', models.URLField(help_text='Høyre klikk på sang -> Share -> Copy Song Link', null=True)),
                ('spotify_URI', models.CharField(help_text='Høyre klikk på sang -> Share -> Copy Spotify URI', max_length=300, null=True)),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.user', verbose_name='Opprettet av')),
                ('tags', models.ManyToManyField(blank=True, to='ntnuisf.Tag')),
            ],
            options={
                'verbose_name': 'Sang',
                'verbose_name_plural': 'Sanger',
                'ordering': ['bpm', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Dato påmeldt')),
                ('is_earlybird', models.BooleanField(default=False, verbose_name='Earlybird')),
                ('has_paid', models.BooleanField(default=False, verbose_name='Har betalt')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ntnuisf.event', verbose_name='Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.user', verbose_name='Bruker')),
            ],
            options={
                'verbose_name': 'Deltaker',
                'verbose_name_plural': 'Deltakere',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, null=True, verbose_name='Tittel')),
                ('path', models.CharField(help_text='URL som brukes i adressefeltet', max_length=100, unique=True)),
                ('content', models.TextField(blank=True, null=True, verbose_name='Innhold')),
                ('private', models.BooleanField(blank=True, default=True, verbose_name='Privat side')),
                ('last_edited', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Sist redigert')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_pageset', to='accounts.user', verbose_name='Opprettet av')),
                ('folder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pages', to='ntnuisf.folder', verbose_name='Mappe')),
                ('last_editor', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor_pageset', to='accounts.user', verbose_name='Sist redigert av')),
            ],
            options={
                'verbose_name': 'Side',
                'verbose_name_plural': 'Sider',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='participants',
            field=models.ManyToManyField(blank=True, related_name='events', through='ntnuisf.Participant', to=settings.AUTH_USER_MODEL, verbose_name='Påmeldte'),
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=140, null=True, verbose_name='Tittel')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Beskrivelse')),
                ('start', models.TimeField(blank=True, null=True)),
                ('duration', models.FloatField(default=7.5, null=True, verbose_name='Varighet')),
                ('nr', models.IntegerField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='ntnuisf.course', verbose_name='Kurs')),
                ('song', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='ntnuisf.song', verbose_name='Sang')),
                ('song2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections_song2', to='ntnuisf.song', verbose_name='Sang')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='ntnuisf.video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'Kurs-seksjon',
                'verbose_name_plural': 'Kurs-seksjoner',
                'ordering': ['nr'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='tags',
            field=models.ManyToManyField(blank=True, to='ntnuisf.Tag'),
        ),
    ]

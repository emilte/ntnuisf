# Generated by Django 4.0 on 2021-12-12 13:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default=None, max_length=1, null=True, verbose_name='Kjønn')),
                ('phone_number', models.CharField(blank=True, default=None, max_length=13, null=True, verbose_name='Mobilnummer')),
                ('spotify_username', models.CharField(blank=True, max_length=150, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Navn')),
            ],
            options={
                'verbose_name': 'Seksjon',
                'verbose_name_plural': 'Seksjoner',
                'ordering': [],
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=140, null=True, verbose_name='Navn')),
                ('background_color', models.CharField(blank=True, help_text='CSS eg: blue, rgba(0,0,255, 0.5)', max_length=1000, null=True, verbose_name='Bakgrunnsfarge')),
                ('text_color', models.CharField(help_text='CSS eg: blue, rgba(0,0,255, 0.5)', max_length=140, null=True, verbose_name='Tekstfarge')),
                ('link_color', models.CharField(help_text='CSS eg: blue, rgba(0,0,255, 0.5)', max_length=140, null=True, verbose_name='Linkfarge')),
                ('link_hover_color', models.CharField(help_text='CSS eg: blue, rgba(0,0,255, 0.5)', max_length=140, null=True, verbose_name='Link hover farge')),
                ('created', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Opprettet')),
                ('creator', models.OneToOneField(blank=True, help_text='Dersom eier er satt, vil temaet være privat', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='themes', to='accounts.user', verbose_name='Eier')),
            ],
            options={
                'verbose_name': 'Tema',
                'verbose_name_plural': 'Temaer',
                'ordering': ['creator', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SpotifyToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='spotify_token', to='accounts.user')),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background', models.CharField(blank=True, default=None, help_text='Bildeaddresse', max_length=1000, null=True, verbose_name='Bakgrunn URL')),
                ('scrollbar', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='Scrollbar farge')),
                ('account_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_account', to='accounts.theme', verbose_name='Bruker-tema')),
                ('course_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_course', to='accounts.theme', verbose_name='Kurs-tema')),
                ('event_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_event', to='accounts.theme', verbose_name='Event-tema')),
                ('footer_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_footer', to='accounts.theme', verbose_name='Footer-tema')),
                ('input_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_input', to='accounts.theme', verbose_name='Input-tema')),
                ('main_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_main', to='accounts.theme', verbose_name='Hoved-tema')),
                ('song_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_song', to='accounts.theme', verbose_name='Musikk-tema')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='accounts.user', verbose_name='Tilhører')),
                ('video_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_video', to='accounts.theme', verbose_name='Turbibliotek-tema')),
                ('wiki_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_as_wiki', to='accounts.theme', verbose_name='Wiki-tema')),
            ],
            options={
                'verbose_name': 'Instilling',
                'verbose_name_plural': 'Instillinger',
            },
        ),
        migrations.CreateModel(
            name='PermissionCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret', models.CharField(max_length=200)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, '------'), (1, 'lead'), (2, 'follow'), (3, 'hjelpeinstruktør'), (4, 'annet')], default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_set', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Instruktør',
                'verbose_name_plural': 'Instruktører',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Dato innmeldt')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.department', verbose_name='Seksjon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.user', verbose_name='Bruker')),
            ],
            options={
                'verbose_name': 'Medlem',
                'verbose_name_plural': 'Medlemmer',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='department',
            name='members',
            field=models.ManyToManyField(related_name='departments', through='accounts.DepartmentMembership', to=settings.AUTH_USER_MODEL, verbose_name='Medlemmer'),
        ),
        migrations.AddField(
            model_name='department',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='accounts.department', verbose_name='Over-seksjon'),
        ),
    ]
